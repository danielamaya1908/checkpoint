const { LinkedList } = require("../DS");
/* ‚ö†Ô∏è NO MODIFICAR NADA POR ENCIMA DE ESTA L√çNEA ‚ö†Ô∏è

8Ô∏è‚É£ ***** EJERCICIO 8 ***** - pacienteEnMayorEspera() 8Ô∏è‚É£

Para lograr agilizar el orden de atenci√≥n de los pacientes necesitamos que construyas una funci√≥n que nos
permita encontrar qu√© paciente es el que m√°s tiempo a estado en espera. Esta funci√≥n debe ser un m√©todo 
de nuestra lista enlazada.

Cada nodo (paciente) en su {value} tiene un objeto con dos propiedades: 
 - **nombre**: nombre del paciente.
 - **espera**: cantidad  de segundos (n√∫mero) transcurridos desde el inicio del d√≠a.

üìù EJEMPLO üìù
(INPUT) ‚û° Head ‚û° ({nombre: "Franco", espera: 123})
                ‚û° ({nombre: "Martin", espera: 5235}) 
                ‚û° ({nombre: "Luc√≠a", espera: 2344}) 
                ‚û° ({nombre: "Marta", espera: 1423})

(OUTPUT) ‚û° {nombre: "Martin", espera: 5235}

REQUISITOS:
üü¢ Devolver al paciente que ha estado esperando m√°s tiempo en la lista.
üü¢ Devolver null si la lista est√° vac√≠a.

*/


LinkedList.prototype.pacienteEnMayorEspera = function () {
  // Tu c√≥digo aqu√≠
  this.head = null;
  this.tail = null;
}

function Node(value) {
  this.value = value;
  this.next = null;
}

LinkedList.prototype.add = function (value) {
  const newNode = new Node(value);

  if (!this.head) {
    this.head = newNode;
    this.tail = newNode;
  } else {
    this.tail.next = newNode;
    this.tail = newNode;
  }
};

LinkedList.prototype.pacienteEnMayorEspera = function () {
  if (!this.head) {
    return null; // Devuelve null si la lista est√° vac√≠a
  }

  let maxEspera = this.head.value.espera;
  let pacienteEnMayorEspera = this.head.value;
  let current = this.head.next;

  while (current) {
    if (current.value.espera > maxEspera) {
      maxEspera = current.value.espera;
      pacienteEnMayorEspera = current.value;
    }
    current = current.next;
  }

  return pacienteEnMayorEspera;
};

// ‚ö†Ô∏è NO MODIFICAR NADA POR DEBAJO DE ESTA L√çNEA ‚ö†Ô∏è
module.exports = LinkedList;
